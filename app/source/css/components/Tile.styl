/**
    Tile base class and mixim.

    'Tile-' works as namespace for generic children elements used in
    based tile classes; names in use: Tile-title, Tile-content, Tile-icon,
    Tile-subtitle.

    Modifiers using 'Tile-' as prefix, rather than subtiles names:
    Tile--tag-** (one per each $brand-colors)
**/

$Tile-hgap = $grid-gap;

Tile() {
    // The tile can be a link, a button
    // or any other element, so ensure
    // some details and resets
    color: $body-copy-color;
    display: block;
    text-decoration: none !important;
    box-sizing: border-box;
    width: 100%;
    border: none;
    background: none;
    text-align: left;
    position: relative;
    padding-left: $Tile-hgap;
    padding-right: $Tile-hgap;

    &:active,
    &:hover {
        &, * {
            color: $brand-secondary-dark !important;
        }
    }

    &:hover {
        outline: 1px solid lighten($brand-secondary, 50%);
        outline-offset: -2px;
    }

    // Class to permanent mark as active, and :active pseudo styles
    // Supported for the state class is-focused, required for components
    // like button-file that may be used along Tile classes.
    &:active,
    &:focus,
    &.is-focused {
        outline: 1px solid $brand-secondary;
        outline-offset: -2px;
    }

    &.active {
        // Tile icons changes color too
        i,
        .icon,
        .fa,
        .ion {
            color: $brand-secondary !important;
        }
    }
}

Tile-singleLine($gap = 0) {
    display: block;
    box-sizing: content-box;
    height: line-height-computed;
    padding-top: $gap;
    padding-bottom: $gap;

    // Cut if out of single line
    white-space: nowrap;
    text-overflow: ellipsis;
    overflow: hidden;
}

Tile-addP($height) {
    > p {
        display: table-cell;
        height: $height;
        vertical-align: middle;
    }
}

Tile-addDiv() {
    > div {
        Tile-singleLine();
        font-weight: normal;
    }
}

Tile-addEm() {
    > em {
        Tile-singleLine();
        font-style: normal;
        color: $text-muted;
    }
}

// Add style for a Tile-content child with multiline and single-line
// sub-childs with common styles and the given number of lines as height limit.
Tile-addContent($linesNumber) {

    $internalHeight = line-height-computed * $linesNumber;

    .Tile-content {
        white-space: normal;
        word-wrap: break-word;
        margin: 0;
        height: $internalHeight;
        overflow: hidden;

        Tile-addP($internalHeight)
        Tile-addDiv()
        Tile-addEm()

        // Support for buttons in tile content, so instead
        // of the tile being a button/link, its a regular element with
        // a button inside.
        // Margin needs adjustment to appear vertically centered, since
        // button height can be lower than tile content
        $computedBtnHeight = 34px;
        $btnMargin = ($internalHeight - $computedBtnHeight) / 2;
        if $btnMargin >= 0 {
            .btn {
                margin: $btnMargin auto;
            }
        }

        // Support for Bootstrap labels
        .label {
            font-size: 1em;
            margin: 0 .7em;
        }
        // Setting margin for small screens since the items margin is auto there
                //@media $mediaMaxXs {
        @media (max-width: 520px) {
            margin: 0 $grid-gap;
        }
    }
}

/** Add colored tags support, marking the content */
Tile-addTagContentSupport($vgap, $left = -6px) {

    addTagFor($colorName, $color) {
        &.Tile--tag-{$colorName} {
            .Tile-content:before {
                content: '';
                position: absolute;
                top: $vgap;
                bottom: $vgap;
                // NO left, because this way it keeps
                // relative to the content (that may vary on Tiles)
                // and using margin as a relative measure
                margin-left: $left;
                border-left: 2px solid $color;
                display: block;
            }
        }
    }

    for $color in $brand-colors {
        addTagFor($color, $brand-colors[$color]);
    }

    for $color in $gray-colors {
        addTagFor('gray-' + $color, $gray-colors[$color]);
    }
}

/** Add colored background support */
Tile-addStyleSupport() {

    addTagFor($colorName, $color) {
        &.Tile--{$colorName} {
          font-style: italic;
          border-left: 10px solid $color;
          z-index: 3;
          > i {
            color: $gray-dark;
          }
        }
    }

    for $color in $brand-colors {
        addTagFor($color, $brand-colors[$color]);
    }

    for $color in $gray-colors {
        addTagFor('gray-' + $color, $gray-colors[$color]);
    }
}
