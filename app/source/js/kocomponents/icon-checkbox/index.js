/**
 * Checkbox component with a better visual UI.
 */
'use strict';

var TAG_NAME = 'icon-checkbox';
var TEMPLATE = require('./template.html');

var ko = require('knockout');
var getObservable = require('../../utils/getObservable');
var lastId = 0;
var autogenerateId = function() {
    return 'icon-checkbox-' + (++lastId);
};

/**
 * The component view model
 * @class
 * @param {Object} params
 * @param {(string|KnockoutObservable<string>)} params.value Whether is checked or not
 * @param {(string|KnockoutObservabke<string>)} params.label Text label attached to the checkbox
 * @param {(string|KnockoutObservable<string>)} [params.id] The ID that will be assigned
 * to the control (and to the label-for to relate them). Autogenerated if no value is provided
 * (if the value is an observable, will never be autogenerated).
 * @param {(boolean|KnockoutObservable<boolean>)} [params.enable=true] Whether the control
 * is enabled or not.
 */
function ViewModel(params) {
    /**
     * @member {KnockoutObservable<string>}
     */
    this.value = getObservable(params.value);
    /**
     * @member {KnockoutObservable<string>}
     */
    this.label = getObservable(params.label);
    /**
     * @member {KnockoutObservable<string>}
     */
    this.id = getObservable(params.id || autogenerateId());
    /**
     * @member {KnockoutObservable<boolean>}
     */
    this.enable = getObservable(typeof(params.enable) === 'undefined' ? true : params.enable);
    /**
     * Provides the CSS class to make the element to look like 'checked' or 'unchecked'
     * depending on the current value.
     * @member {KnockoutComputed<string>}
     */
    this.iconClass = ko.pureComputed(function() {
        var icon = 'fa ion ion-android-checkbox-outline';
        if (!this.value())
            icon += '-blank';
        return icon;
    }, this);
}

ko.components.register(TAG_NAME, {
    template: TEMPLATE,
    viewModel: ViewModel
});
