@using WebMatrix.WebData;
@*
    Sign-up a user, getting logged if success and returns the same
    result as the Login method. If the user and password exists
    already and match, it just get logged (exception: if the user
    was a customer as is requesting the 'freelancer' type, will become
    a freelance and get logged).

    TODO Coordinate with login about changes in things like old redirectUrl

    - POST:
        - email:string
        - password:string
        - atBooking:bool Optional
        - firstName:string Optional except atBooking
        - lastName:string Optional except atBooking
        - phone:string Optional except atBooking
        - facebookUserID:string Allows to sign-in without password but with a valid Facebook Account
        - facebookAccessToken:string If facebookUserID is used, the access token is required to validate the account
        - returnProfile:bool as in Login
        - jobTitleID:int Optional, allows to create a listing along with the signup
        - jobTitleName:string Optional, allows to create a listing along with the signup, if the given name is found or valid as a new one
        - profileType:string Enumeration: 'service-professional', 'client'
            NOTE: Currently allowed: 'freelancer', 'freelance', 'provider' as aliases,
                any other value or not value will create a 'client' profile.

    - POST /facebook:
        - accessToken:string Given by the Facebook API on the browser/app
            Currently, as of implementation, is supported too: signed_request and 'Facebook App cookie'
        - returnProfile:bool as in normal Signup
        - profileType:string as in normal Signup

    - return: same as Login, or 400 with validation errors.

    EXAMPLES {
        "Signup": {
            "url": "/api/v1/en-US/auth/signup",
            "post": {
                 "email": "some user email",
                 "password": "",
                 "atBooking": true,
                 "firstName": "John",
                 "lastName": "Smith",
                 "phone": "1234",
                 "profileType": "service-professional",
                 "facebookUserID": "",
                 "facebookAccessToken": "",
                 "returnProfile": false,
                 "jobTitleID": null,
                 "jobTitleName": null,
                 "api comment": "Same returned data as in Login, and returnProfile behaves the same too. The returned 'redirectUrl' on success must be mandatory when there is a value since sometimes will be different from the given 'redirect', as for providers in the Onboarding, they must continue that at the step given in 'redirectUrl'. This is the fact for current Website, what rules we will manage on mobile?."
            }
        },
        "Facebook Signup (quick signup that will retrieve basic user data from Facebook, server2server)": {
            "url": "/api/v1/en-US/auth/signup/facebook",
            "post": {
                "accessToken": "Facebook Access Token",
                "profileType": "service-professional",
                "returnProfile": true
            }
        }
    }
*@
@functions{
    public class RestSignup : RestWebPage
    {
        public override dynamic Post()
        {
            if (UrlData.Count > 0 ) {
                if (UrlData[0] == "facebook") {
                    return LcAuthHelper.FacebookSignup(this.WebPage);
                }
                else {
                    throw new HttpException(404, "Not Found");
                }
            }
            else {
                var ret = LcAuthHelper.Signup(this.WebPage);

                // Special parameters for professionals: the signup
                // can do the task of POST:user-job-profile if
                // the expected parameters are given, simplifing the
                // onboarding that skips the 'add job title' step.
                if (ret.profile.isServiceProfessional)
                {
                    var userJobTitleApi = new RestUserJobProfile();
                    userJobTitleApi.WebPage = this.WebPage;
                    int userID = ret.userID;
                    var jobTitleID = Request["jobTitleID"].AsInt(0);
                    var jobTitleName = userJobTitleApi.GetValidatedJobTitleName(Request.Form["jobTitleName"]);
                    // If we have the required fields, we attempt to add the job title
                    // to the just created user profile
                    // We need a positive jobTitleID or a validated jobTitleName (it's null if was not valid
                    // or empty)
                    if (jobTitleID > 0 || jobTitleName != null)
                    {
                        // Throws exceptions if something wrong
                        // All are about: job title ID don't exist or is forbidden, not allowed
                        // create job title for the given name.
                        // In that cases, throwing an error will stop sign-up but account already exists
                        // so attempts after may fail and the problem is not easy to fix by the user,
                        // is better to left the onboarding to happening, leading user to 
                        // the addJobTitle step at some point that will throw detailed error messages if user
                        // try the same input --is not the perfect usability that extra on that cases
                        // but more reasonable than left the user thinking couldn't create the account
                        // when is already set-up
                        try
                        {
                            var userJobTitle = userJobTitleApi.Create(userID, jobTitleID, jobTitleName);
                            // Set the selected/created jobTitleID (#374)
                            ret.onboardingJobTitleID = userJobTitle.jobTitleID;
                        }
                        catch { }
                    }
                }

                return ret;
            }
        }
    }
}
@{   
    new RestSignup().JsonResponse(this);
}
