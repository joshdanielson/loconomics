@using WebMatrix.WebData;
@*
    List, create and edit user earnings entries.
    Get reportings statistics for earnings.

    Options:

    - GET: get the entries list (last entries if no query is provided)
        - limit:int Default:40. Sets the maximum amount of entries to include in results.
        - untilID:int Default:null. Ask for the inmediate older entries than the given earningsEntryID. The entry for that ID is not included in the results.
        - sinceID:int Default:null. Ask for the inmediate newer threads than the given earningsEntryID. The entry for that ID is not included in the results.

    - GET /@earningsEntryID: get the entry

    - POST: register a new entry

    - PUT /@earningsEntryID: Updates an entry

    - DELETE /@earningsEntryID: Deletes an entry

    - @Result list or item of type LcRest.UserEarningsEntry

    EXAMPLES {
        "Earnings (list and create)": {
            "url": "/api/v1/en-US/me/earnings",
            "get": {
                "limit": 40,
                "untilID": null,
                "sinceID": null
            },
            "post": {
                "paidDate": "2018-02-09T10:00:00Z",
                "durationMinutes": 120,
                "userExternalListingID": 1,
                "jobTitleID": 106,
                "clientUserID": 141,
                "notes": "Something else"
            }
        },
        "Earnigs entry (udpate and delete": {
            "url": "/api/v1/en-US/me/earnings/123",
            "get": { },
            "put": {
                "paidDate": "2018-02-09T10:00:00Z",
                "durationMinutes": 120,
                "userExternalListingID": 1,
                "jobTitleID": 106,
                "clientUserID": 141,
                "notes": "Something else"
            },
            "delete": { }
        }
    }
*@
@functions{
    public class RestUserEarnings : RestWebPage
    {
        private dynamic GetEntries()
        {
            // Parameters
            int userID = WebSecurity.CurrentUserId;
            var limit = Request["limit"].AsInt(40);
            int? untilID = Request["untilID"].IsInt() ? Request["untilID"].AsInt() : (int?)null;
            int? sinceID = Request["sinceID"].IsInt() ? Request["sinceID"].AsInt() : (int?)null;

            return LcRest.UserEarningsEntry.GetList(userID, limit, untilID, sinceID);
        }

        public override dynamic Get()
        {
            if (UrlData.Count == 0)
            {
                return GetEntries();
            }
            else if (UrlData[0] == "report" && UrlData.Count == 1)
            {
                // TODO
            }
            else if (UrlData[0].IsInt() && UrlData.Count == 1)
            {
                var userID = WebSecurity.CurrentUserId;
                var itemID = UrlData[0].AsInt();
                var item = LcRest.UserEarningsEntry.Get(userID, itemID);
                if (item != null)
                {
                    return item;
                }
                else
                {
                    throw new HttpException(404, "Not Found");
                }
            }
            return base.Get();
        }

        public override dynamic Post()
        {
            if (UrlData.Count == 0)
            {
                var userID = WebSecurity.CurrentUserId;
                // Create
                return SetItem(userID);
            }

            return base.Post();
        }

        public override dynamic Put()
        {
            if (UrlData.Count == 1 && UrlData[0].IsInt())
            {
                var userID = WebSecurity.CurrentUserId;
                var itemID = UrlData[0].AsInt();

                if (itemID > 0)
                {
                    return SetItem(userID, itemID);
                }
            }

            // method not allowed
            return base.Put();
        }

        public override dynamic Delete()
        {
            if (UrlData.Count == 1 && UrlData[0].IsInt())
            {
                var userID = WebSecurity.CurrentUserId;
                var itemID = UrlData[0].AsInt();

                // Get a copy before deletion to send later
                var item = LcRest.UserEarningsEntry.Get(userID, itemID);

                if (item == null)
                {
                    throw new HttpException(404, "Not Found");
                }

                // Delete
                LcRest.UserEarningsEntry.Delete(userID, itemID);

                return item;
            }

            return base.Delete();
        }

        private bool IsValid()
        {
            Validation.RequireField("paidDate", LcRessources.RequiredField("Date Paid"));
            Validation.RequireField("durationMinutes", LcRessources.RequiredField("Duration"));
            Validation.RequireField("userExternalListingID", LcRessources.RequiredField("Listing"));
            Validation.RequireField("jobTitleID", LcRessources.RequiredField("Job Title"));
            Validation.RequireField("clientUserID", LcRessources.RequiredField("Client"));

            return Validation.IsValid() && ModelState.IsValid;
        }

        private LcRest.UserEarningsEntry SetItem(int userID, int itemID = 0)
        {
            // Validation
            if (!IsValid())
            {
                throw new HttpException(400, LcRessources.ValidationSummaryTitle);
            }

            var item = GetItemFromForm();
            item.userID = userID;
            item.earningsEntryID = itemID;

            item.earningsEntryID = LcRest.UserEarningsEntry.Set(item);

            // If returned ID is zero rather than the provided one
            // is because the requested ID was not found.
            // (for cases of new, when passed ID is zero, the returned is the
            // new generated ID, so is not zero if created successfully).
            if (item.earningsEntryID == 0)
            {
                throw new HttpException(404, "Not Found");
            }

            // Returns the updated client data
            return LcRest.UserEarningsEntry.Get(userID, item.earningsEntryID);
        }

        private LcRest.UserEarningsEntry GetItemFromForm()
        {
            return new LcRest.UserEarningsEntry
            {
                paidDate = DateTimeOffsetFromISO(Request.Form["paidDate"]).Value,
                durationMinutes = Request.Form["durationMinutes"].AsInt(),
                userExternalListingID = Request.Form["userExternalListingID"].AsInt(),
                jobTitleID = Request.Form["jobTitleID"].AsInt(),
                clientUserID = Request.Form["clientUserID"].AsInt(),
                notes = Request.Form["notes"]
            };
        }
    }
}
@{
    Response.RestRequiresUser(LcData.UserInfo.UserType.ServiceProfessional);
    new RestUserEarnings().JsonResponse(this);
}
