@{
    var response = "";
    var gw = LcPayment.NewBraintreeGateway();

    if (!IsPost)
    {
        var challenge = Request["bt_challenge"];
        if (!String.IsNullOrWhiteSpace(challenge))
        {
            response = gw.WebhookNotification.Verify(Request["bt_challenge"]);
        }
    }
    else
    {
        var signature = Request["bt_signature"];
        var payload = Request["bt_payload"];
        var notification = gw.WebhookNotification.Parse(signature, payload);

        // Detect bad set-up and proper target of the payload by checking that notification is not null
        // (if the signature received doesn't matches current Braintree keys, that creates the Gateway object,
        // then something is wrong in the settings).
        if (notification == null)
        {
            throw new Exception("Wrong Braintree set-up for received notification");
        }

        // Doing the action that fits better:
        // (Next if block is like a switch(notification.Kind) but the type used by Braintree doesn't allow that syntax)
        //
        // Marketplace Merchant Accounts
        if (notification.Kind == Braintree.WebhookKind.SUB_MERCHANT_ACCOUNT_APPROVED)
        {
            LcPayment.RegisterProviderPaymentAccountCreationNotification(notification, signature, payload);
        }
        else if (notification.Kind == Braintree.WebhookKind.SUB_MERCHANT_ACCOUNT_DECLINED)
        {
            LcPayment.RegisterProviderPaymentAccountCreationNotification(notification, signature, payload);
            var providerID = LcUtils.ExtractInt(notification.MerchantAccount.Id, 0);
            LcMessaging.SendMerchantAccountNotification(providerID);
        }
        // Payment Plan Subscription updates
        else if (PlanSubscriptionNotificationKinds.Contains(notification.Kind))
        {
            var userPlan = LcRest.UserPaymentPlan.GetBySubscriptionID(notification.Subscription.Id);
            if (userPlan == null)
            {
                // If was a removal (cancellation/expiration) and wasn't found, we understand that was already removed
                // from database, BUT we should not remove but keep it for history purpose with proper status, for now
                // rather than automatically create a record (under consideration), send an error email but return
                // a correct result to Braintree so it stops notifying us about this.
                if (notification.Kind == Braintree.WebhookKind.SUBSCRIPTION_CANCELED || notification.Kind == Braintree.WebhookKind.SUBSCRIPTION_EXPIRED)
                {
                    LcMessaging.NotifyError("Braintree payment notification", "/PaymentGatewayWebhook", "UserPaymentPlan subscription not found (" + notification.Subscription.Id + ") while Braintree notified a kind of removal (" + notification.Kind.ToString() + "). Notifications will stop here, please review it " + 
                        "manually to ensure this is working as expected and if a registration of the removed payment subscription should be done.");
                    // Let Braintree stop notifing us as if we managed this correctly.
                    response = "OK";
                }
                else
                {
                    throw new Exception("UserPaymentPlan subscription not found (" + notification.Subscription.Id + ")");
                }
            }
            else
            {
                userPlan.UpdatedAtGateway(notification.Subscription, notification.Kind);
                LcRest.UserPaymentPlan.Set(userPlan);

                // Payments
                foreach (var transaction in notification.Subscription.Transactions)
                {
                    var payment = LcRest.UserFeePayment.FromSubscriptionTransaction(userPlan, transaction);
                    LcRest.UserFeePayment.Set(payment);
                }
            }
        }
        else if (notification.Kind == Braintree.WebhookKind.CHECK)
        {
            response = "OK";
        }
        else
        {
            throw new HttpException(400, "Not supported BraintreNotification.Kind: " + notification.Kind);
        }
    }
}
@functions
{
    List<Braintree.WebhookKind> PlanSubscriptionNotificationKinds = new List<Braintree.WebhookKind>
    {
        // Status Changes
        Braintree.WebhookKind.SUBSCRIPTION_CANCELED,
        Braintree.WebhookKind.SUBSCRIPTION_EXPIRED,
        Braintree.WebhookKind.SUBSCRIPTION_WENT_ACTIVE,
        Braintree.WebhookKind.SUBSCRIPTION_WENT_PAST_DUE,
        // Payment Changes: it can change the status (past_due on unsuccessfully,
        // active on successfully if comes from past_due)
        // and subscription data (NextBilling info).
        Braintree.WebhookKind.SUBSCRIPTION_CHARGED_SUCCESSFULLY,
        Braintree.WebhookKind.SUBSCRIPTION_CHARGED_UNSUCCESSFULLY
        // Trial ended notification is not relevant (status is active before and after
        // and payment data the same; the actual relevant changes when that happens is
        // the payment charge, detected with the '_CHARGED_' notifications)
        //Braintree.WebhookKind.SUBSCRIPTION_TRIAL_ENDED
    };
}
@response